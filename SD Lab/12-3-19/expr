student@T28:~$ expr 3 + 2
5
student@T28:~$ expr 12 \ * 2
expr: syntax error
student@T28:~$ expr 12 \* 2
24
student@T28:~$ a=10
student@T28:~$ a = expr $a + 1
a: command not found
student@T28:~$ a = expr $ a + 1
a: command not found
student@T28:~$ a = `expr $ a + 1`
expr: syntax error
a: command not found
student@T28:~$ a = `expr $a+1`
a: command not found
student@T28:~$ a=`expr $a+1`
student@T28:~$ echo $a
10+1
student@T28:~$ a=`expr $a + 1`
expr: non-integer argument
student@T28:~$ a=`expr$a + 1`
student@T28:~$ echo $a
1
student@T28:~$ a=20
student@T28:~$ echo $a
20
student@T28:~$ a=expr $a + 1`
> 
> ^C
student@T28:~$ a=expr $a + 1 

20: command not found
student@T28:~$ a=`expr $a + 1`
student@T28:~$ echo $a
21
student@T28:~$ echo "Enter Two numbers"
Enter Two numbers
student@T28:~$ 2 3
2: command not found
student@T28:~$ read a
2
student@T28:~$ read b 
3
student@T28:~$ sum='expr $a + $b`
> ^C
student@T28:~$ sum=`expr $a + $b`
student@T28:~$ echo "sum = $sum
> ^C
student@T28:~$ echo "sum=$sum
> ^C
student@T28:~$ echo "sum=$sum"
sum=5
student@T28:~$ man expr
student@T28:~$ expr --version
expr (GNU coreutils) 8.28
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, James Youngman, and Paul Eggert.
student@T28:~$ expr --help
Usage: expr EXPRESSION
  or:  expr OPTION

      --help     display this help and exit
      --version  output version information and exit

Print the value of EXPRESSION to standard output.  A blank line below
separates increasing precedence groups.  EXPRESSION may be:

  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise ARG2

  ARG1 & ARG2       ARG1 if neither argument is null or 0, otherwise 0

  ARG1 < ARG2       ARG1 is less than ARG2
  ARG1 <= ARG2      ARG1 is less than or equal to ARG2
  ARG1 = ARG2       ARG1 is equal to ARG2
  ARG1 != ARG2      ARG1 is unequal to ARG2
  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2
  ARG1 > ARG2       ARG1 is greater than ARG2

  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2
  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2

  ARG1 * ARG2       arithmetic product of ARG1 and ARG2
  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2
  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2

  STRING : REGEXP   anchored pattern match of REGEXP in STRING

  match STRING REGEXP        same as STRING : REGEXP
  substr STRING POS LENGTH   substring of STRING, POS counted from 1
  index STRING CHARS         index in STRING where any CHARS is found, or 0
  length STRING              length of STRING
  + TOKEN                    interpret TOKEN as a string, even if it is a
                               keyword like 'match' or an operator like '/'

  ( EXPRESSION )             value of EXPRESSION

Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else lexicographical.
Pattern matches return the string matched between \( and \) or null; if
\( and \) are not used, they return the number of characters matched or 0.

Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null
or 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.

GNU coreutils online help: <http://www.gnu.org/software/coreutils/>
Full documentation at: <http://www.gnu.org/software/coreutils/expr>
or available locally via: info '(coreutils) expr invocation'
student@T28:~$ man expr
student@T28:~$ a="hello"
student@T28:~$ len=`expr length $a`
student@T28:~$ $len
5: command not found
student@T28:~$ echo $len
5
student@T28:~$ man expr
student@T28:~$ a="meenu"
student@T28:~$ len=`expr length $a`
student@T28:~$ echo $len
5
student@T28:~$ man expr
student@T28:~$ b="welcome"
student@T28:~$ s=`expr substr $b 3 4`
student@T28:~$ echo $s
lcom
student@T28:~$ expr hai hello
expr: syntax error
student@T28:~$ `expr hai hello`
expr: syntax error
student@T28:~$ a="hai"
student@T28:~$ b="hello"
student@T28:~$ `expr hai hello`
expr: syntax error
student@T28:~$ `ex^C hai hello`
student@T28:~$ `expr hai:hello`
hai:hello: command not found
student@T28:~$ `expr hai : hello`
0: command not found
student@T28:~$ expr hai : hello
0
student@T28:~$ expr geek : geeks
0
student@T28:~$ b="hello world"
student@T28:~$ s=`expr substr $b world`
student@T28:~$ echo $s

student@T28:~$ b="helloworld"
student@T28:~$ s=`expr substr $b world`
expr: syntax error
student@T28:~$ b="hello"
student@T28:~$ s=`expr substr $b 2 4`
student@T28:~$ echo $s
ello
student@T28:~$ x=10
student@T28:~$ y=20
student@T28:~$ c=`expr $x = $y
> ^C
student@T28:~$ c=`expr $x = $y`
student@T28:~$ echo $c
0
student@T28:~$ c=`expr $x \< $y
> ^C
student@T28:~$ c=`expr $x \<  $y
> ^C
student@T28:~$ x=10
student@T28:~$ y=20
student@T28:~$ c=`expr $x \<  $y`
student@T28:~$ echo $c
1
student@T28:~$ c=`expr $x \!=  $y`
student@T28:~$ echo $c
1
student@T28:~$ c=`expr $x =  $y`
student@T28:~$ echo $c
0
student@T28:~$ y=10
student@T28:~$ z=10
student@T28:~$ c=`expr $y =  $z`
student@T28:~$ echo $c
1
student@T28:~$ c=`expr $x \!=  $y`
student@T28:~$ y=10^C
student@T28:~$ a="hei"
student@T28:~$ b="hai"
student@T28:~$ expr hai : hello
0
student@T28:~$ `expr hai : hello`
0: command not found
student@T28:~$ expr hai : hello^C
student@T28:~$ `expr hello : hello`
5: command not found
student@T28:~$ `expr anu : anukutty`
0: command not found
student@T28:~$ `expr anu : anukutty`
0: command not found
student@T28:~$ `expr hello : helloworld`
0: command not found
student@T28:~$ `expr hello : hello world`
expr: syntax error
student@T28:~$ `expr meenujohn : meenu'
> ^C
student@T28:~$ 
student@T28:~$ `expr meenujohn : meenu`
5: command not found
student@T28:~$ expr welcome : wel
3
student@T28:~$ 

